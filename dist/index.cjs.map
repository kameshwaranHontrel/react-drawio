{"version":3,"file":"index.cjs","sources":["../src/utils/getEmbedUrl.ts","../src/utils/handleEvent.ts","../src/hooks/useActions.ts","../src/DrawIoEmbed.tsx"],"sourcesContent":["import { UrlParameters } from '../types';\n\nexport const getEmbedUrl = (\n  baseUrl?: string,\n  urlParameters?: UrlParameters,\n  addConfiguration?: boolean\n) => {\n  const url = new URL('/', baseUrl ?? 'https://embed.diagrams.net');\n  const urlSearchParams = new URLSearchParams();\n\n  urlSearchParams.append('embed','1');\n\n  urlSearchParams.append('proto', 'json');\n\n  if (addConfiguration) {\n    urlSearchParams.append('configure', '1');\n  }\n\n  if (urlParameters) {\n    Object.keys(urlParameters).forEach((key) => {\n      const value = urlParameters[key as keyof UrlParameters];\n\n      if (value !== undefined) {\n        if (typeof value === 'boolean') {\n          urlSearchParams.append(key, value ? '1' : '0');\n        } else {\n          urlSearchParams.append(key, value.toString());\n        }\n      }\n    });\n  }\n\n  url.search = urlSearchParams.toString();\n\n  return url.toString();\n};\n","import { EmbedEvents } from '../types';\n\ntype EventHandler = {\n  [key in EmbedEvents['event']]?: (data: Extract<EmbedEvents, { event: key }>) => void;\n};\n\nexport function handleEvent(event: MessageEvent, handlers: EventHandler, baseUrl?: string) {\n  if (!event.origin.includes('embed.diagrams.net') && (baseUrl && !event.origin.includes(baseUrl))) {\n    return;\n  }\n\n  try {\n    const data = JSON.parse(event.data) as EmbedEvents;\n\n    if (data.event in handlers) {\n      const handler = handlers[data.event];\n\n      if (handler) {\n        // @ts-ignore Not sure how to fix for now\n        handler(data);\n      }\n    }\n  } catch {\n    //\n  }\n};\n","import { RefObject } from 'react';\nimport {\n  ActionConfigure,\n  ActionDialog,\n  ActionDraft,\n  ActionExport,\n  ActionLayout,\n  ActionLoad,\n  ActionMerge,\n  ActionPrompt,\n  ActionSpinner,\n  ActionStatus,\n  ActionTemplate,\n  EmbedActions\n} from '../types';\n\ntype UniqueActionProps<T> = Omit<T, 'action'>;\n\nexport const useActions = (iframeRef: RefObject<HTMLIFrameElement | null>) => {\n  const sendAction = (\n    action: string,\n    data: UniqueActionProps<EmbedActions>\n  ) => {\n    iframeRef.current?.contentWindow?.postMessage(\n      JSON.stringify({\n        action,\n        ...data\n      }),\n      '*'\n    );\n  };\n\n  /**\n   * Load the contents of a diagram\n   */\n  const load = (data: UniqueActionProps<ActionLoad>) => {\n    sendAction('load', data);\n  };\n\n  const configure = (data: UniqueActionProps<ActionConfigure>) => {\n    sendAction('configure', data);\n  };\n\n  /**\n   * Merge the contents of the given XML into the current file\n   */\n  const merge = (data: UniqueActionProps<ActionMerge>) => {\n    sendAction('merge', data);\n  };\n\n  /**\n   * Display a dialog in the editor window\n   */\n  const dialog = (data: UniqueActionProps<ActionDialog>) => {\n    sendAction('dialog', data);\n  };\n\n  /**\n   * Display a prompt in the editor window\n   */\n  const prompt = (data: UniqueActionProps<ActionPrompt>) => {\n    sendAction('prompt', data);\n  };\n\n  /**\n   * Show the template dialog\n   */\n  const template = (data: UniqueActionProps<ActionTemplate>) => {\n    sendAction('template', data);\n  };\n\n  /**\n   * Runs an array of layouts using the same format as Arrange > Layout > Apply.\n   */\n  const layout = (data: UniqueActionProps<ActionLayout>) => {\n    sendAction('layout', data);\n  };\n\n  /**\n   * Show a draft dialog\n   */\n  const draft = (data: UniqueActionProps<ActionDraft>) => {\n    sendAction('draft', data);\n  };\n\n  /**\n   * Display a message in the status bar\n   */\n  const status = (data: UniqueActionProps<ActionStatus>) => {\n    sendAction('status', data);\n  };\n\n  /**\n   * Display a spinner with a message or hide the current spinner if show is set to false\n   */\n  const spinner = (data: UniqueActionProps<ActionSpinner>) => {\n    sendAction('spinner', data);\n  };\n\n  const exportDiagram = (data: UniqueActionProps<ActionExport>) => {\n    sendAction('export', data);\n  };\n\n  return {\n    load,\n    configure,\n    merge,\n    dialog,\n    prompt,\n    template,\n    layout,\n    draft,\n    status,\n    spinner,\n    exportDiagram\n  };\n};\n","import {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState\n} from 'react';\nimport { DrawIoEmbedProps, DrawIoEmbedRef } from './types';\nimport { getEmbedUrl } from './utils/getEmbedUrl';\nimport { handleEvent } from './utils/handleEvent';\nimport { useActions } from './hooks/useActions';\nimport React from 'react';\n\nexport const DrawIoEmbed = forwardRef<DrawIoEmbedRef, DrawIoEmbedProps>(\n  (props, ref) => {\n    const {\n      baseUrl,\n      urlParameters,\n      configuration,\n      xml,\n      exportFormat,\n      onSave,\n      onClose,\n      onLoad,\n      onConfigure,\n      onDraft,\n      onExport,\n      onMerge,\n      onPrompt,\n      onTemplate\n    } = props;\n\n    const iframeRef = useRef<HTMLIFrameElement>(null);\n    const action = useActions(iframeRef);\n    const iframeUrl = getEmbedUrl(baseUrl, urlParameters, !!configuration);\n    const [isInitialized, setIsInitialized] = useState(false);\n\n    const messageHandler = (evt: MessageEvent) => {\n      handleEvent(\n        evt,\n        {\n          init: () => {\n            setIsInitialized(true);\n          },\n          load: (data) => {\n            if (onLoad) {\n              onLoad(data);\n            }\n          },\n          configure: (data) => {\n            if (configuration) {\n              action.configure({ config: configuration });\n            }\n\n            if (onConfigure) {\n              onConfigure(data);\n            }\n          },\n          save: (data) => {\n            action.exportDiagram({\n              format: exportFormat || 'xmlsvg',\n              // @ts-ignore not allowed normally, but only for internal use\n              exit: data.exit,\n              parentEvent: 'save'\n            });\n          },\n          exit: (data) => {\n            if (onClose) {\n              onClose(data);\n            }\n          },\n          draft: (data) => {\n            if (onDraft) {\n              onDraft(data);\n            }\n          },\n          export: (data) => {\n            if (onSave) {\n              onSave({\n                event: 'save',\n                xml: data.data,\n                parentEvent: data.message.parentEvent || 'export'\n              });\n            }\n\n            if (onExport) {\n              onExport(data);\n            }\n\n            // @ts-ignore not allowed normally, but only for internal use\n            if (data.message.exit && onClose) {\n              onClose({\n                event: 'exit',\n                modified: true,\n                parentEvent: data.message.parentEvent || 'export'\n              });\n            }\n          },\n          merge: (data) => {\n            if (onMerge) {\n              onMerge(data);\n            }\n          },\n          prompt: (data) => {\n            if (onPrompt) {\n              onPrompt(data);\n            }\n          },\n          template: (data) => {\n            if (onTemplate) {\n              onTemplate(data);\n            }\n          }\n        },\n        baseUrl\n      );\n    };\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        ...action\n      }),\n      []\n    );\n\n    useEffect(() => {\n      if (isInitialized) {\n        if (xml) {\n          if (exportFormat === 'xmlpng') {\n            action.load({ xmlpng: xml });\n          } else {\n            action.load({ xml });\n          }\n        } else {\n          action.load({ xml: '' });\n        }\n      }\n    }, [isInitialized, xml]);\n\n    // Initial load\n    useEffect(() => {\n      window.addEventListener('message', messageHandler);\n\n      return () => {\n        window.removeEventListener('message', messageHandler);\n      };\n    }, []);\n\n    return (\n      <iframe\n        className=\"diagrams-iframe\"\n        src={iframeUrl}\n        ref={iframeRef}\n        title=\"Diagrams.net\"\n        style={{\n          width: '100%',\n          height: '100%',\n          minWidth: '400px',\n          minHeight: '400px',\n          border: 'none'\n        }}\n      />\n    );\n  }\n);\n"],"names":["getEmbedUrl","baseUrl","urlParameters","addConfiguration","url","URL","urlSearchParams","URLSearchParams","append","Object","keys","forEach","key","value","undefined","toString","search","handleEvent","event","handlers","origin","includes","data","JSON","parse","handler","useActions","iframeRef","sendAction","action","current","contentWindow","postMessage","stringify","load","configure","merge","dialog","prompt","template","layout","draft","status","spinner","exportDiagram","DrawIoEmbed","forwardRef","props","ref","configuration","xml","exportFormat","onSave","onClose","onLoad","onConfigure","onDraft","onExport","onMerge","onPrompt","onTemplate","useRef","iframeUrl","isInitialized","setIsInitialized","useState","messageHandler","evt","init","config","save","format","exit","parentEvent","export","message","modified","useImperativeHandle","useEffect","xmlpng","window","addEventListener","removeEventListener","iframe","className","src","title","style","width","height","minWidth","minHeight","border"],"mappings":"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"}